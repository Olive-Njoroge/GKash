openapi: 3.0.0
info:
  title: GKash Money Market Fund API
  version: 2.0.0
  description: |
    ## GKash Money Market Fund API - Complete User Verification Flow
    
    ### üöÄ **3-Step Registration Process:**
    1. **üì∑ Upload ID + Selfie** ‚Üí Verify selfie matches ID image
    2. **üì± Add Phone Number** ‚Üí Enter phone number for contact
    3. **üîê Create PIN** ‚Üí Complete registration & auto-login
    
    ### üîê **Simple Login:**
    - **National ID + PIN**: Simple two-field login using data extracted during registration
    
    ### üí° **Key Features:**
    - **OCR.space** for automatic ID data extraction
    - **Face matching** verification between selfie and ID
    - **Phone OTP** verification via Tiara Connect
    - **Secure PIN** authentication system

servers:
  - url: https://gkash.onrender.com/api
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

paths:
  /auth/register-with-id:
    post:
      summary: Step 1 - Upload ID + Selfie (Verify selfie matches ID)
      description: Upload ID document and selfie photo. System verifies that the selfie matches the person in the ID image and extracts National ID and name automatically using OCR.space.
      tags: [Authentication]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - idImage
                - selfie
              properties:
                idImage:
                  type: string
                  format: binary
                  description: ID document image (JPG, PNG, JPEG, max 5MB)
                selfie:
                  type: string
                  format: binary
                  description: User selfie photo (JPG, PNG, JPEG, max 5MB)
      responses:
        "200":
          description: ID processed successfully. Complete registration with extracted data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "ID processed successfully. Complete your registration."
                  temp_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    description: Use this token to complete registration
                  extractedData:
                    type: object
                    properties:
                      user_name:
                        type: string
                        example: "JOHN DOE"
                        description: Name extracted from ID via OCR
                      user_nationalId:
                        type: string
                        example: "12345678"
                        description: National ID extracted from ID via OCR
                      dateOfBirth:
                        type: string
                        example: "1990-01-01"
                        description: Date of birth if detected
                  verificationScore:
                    type: integer
                    example: 85
                    description: Confidence score (0-100) based on OCR accuracy
                  autoApproved:
                    type: boolean
                    example: true
                    description: Auto-approved if score ‚â• 60% and faces detected
        "400":
          description: Invalid files, missing data, or user already exists
        "422":
          description: No face detected in images or insufficient image quality

  /auth/add-phone:
    post:
      summary: Step 2 - Add Phone Number
      description: Add phone number after ID verification for contact purposes.
      tags: [Authentication]
      security:
        - tempTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phoneNumber
              properties:
                phoneNumber:
                  type: string
                  example: "6789087654"
                  description: Phone number for verification
      responses:
        "200":
          description: Phone number added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Phone number added. Proceed to create PIN."
        "400":
          description: Invalid phone number or number already exists
        "403":
          description: Invalid temp token

  /auth/create-pin:
    post:
      summary: Step 3 - Create PIN & Complete Registration
      description: Create 4-digit PIN and complete the registration process. Returns JWT token for immediate login.
      tags: [Authentication]
      security:
        - tempTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_pin
              properties:
                user_pin:
                  type: string
                  pattern: '^[0-9]{4}$'
                  example: "1234"
                  description: 4-digit PIN for secure login
      responses:
        "201":
          description: Registration completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Registration completed successfully! You can now login with your PIN."
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    type: object
                    properties:
                      user_nationalId:
                        type: string
                        example: "12345678"
                        description: National ID (store in localStorage)
                      user_name:
                        type: string
                        example: "JOHN DOE"
                      phoneNumber:
                        type: string
                        example: "6789087654"
                      idVerified:
                        type: boolean
                        example: true
        "400":
          description: Invalid PIN format or phone not verified
        "403":
          description: Invalid temp token

  /auth/login:
    post:
      summary: üîê Login - National ID + PIN
      description: |
        **Simple two-field login**
        
        Users enter their National ID (extracted during registration) and 4-digit PIN.
        
        **User Experience:** Enter National ID + PIN ‚Üí Access account  
        **Security:** Both fields are required for authentication
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_nationalId
                - user_pin
              properties:
                user_nationalId:
                  type: string
                  example: "12345678"
                  description: National ID extracted during registration
                user_pin:
                  type: string
                  pattern: '^[0-9]{4}$'
                  example: "1234"
                  description: 4-digit PIN
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    type: object
                    properties:
                      user_nationalId:
                        type: string
                        example: "12345678"
                      user_name:
                        type: string
                        example: "JOHN DOE"
                      phoneNumber:
                        type: string
                        example: "6789087654"
                      idVerified:
                        type: boolean
                        example: true
        "400":
          description: Missing required fields or registration incomplete
        "401":
          description: Invalid PIN
        "404":
          description: User not found with this phone number

  /auth/create-pin:
    post:
      summary: Legacy - Create PIN for existing users
      description: For users who registered before ID-first flow implementation
      tags: [Legacy Auth]
      security:
        - tempTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_pin
              properties:
                user_pin:
                  type: string
                  pattern: '^[0-9]{4}$'
                  example: "1234"
                  description: 4-digit PIN
      responses:
        "200":
          description: PIN created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "PIN created successfully"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "400":
          description: Invalid PIN format
        "403":
          description: Invalid temp token

  /user:
    get:
      summary: Get all users
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of users

  /user/{id}:
    get:
      summary: Get user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: A single user object

    put:
      summary: Update user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                phoneNumber:
                  type: string
      responses:
        "200":
          description: User updated successfully

    delete:
      summary: Delete user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: User deleted successfully

  /accounts:
    post:
      summary: Create a new account
      tags: [Accounts]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - account_type
              properties:
                account_type:
                  type: string
                  enum: ["balanced fund", "fixed income fund", "money market fund", "stock market"]
                  example: balanced fund
      responses:
        "201":
          description: Account created successfully

    get:
      summary: Get all accounts for logged-in user
      tags: [Accounts]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of accounts

  /accounts/{id}:
    get:
      summary: Get account by ID
      tags: [Accounts]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Account object

    delete:
      summary: Delete account by ID
      tags: [Accounts]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Account deleted successfully

  /transactions:
    post:
      summary: Create a new transaction (deposit or withdraw)
      tags: [Transactions]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - transaction_type
                - amount
              properties:
                transaction_type:
                  type: string
                  enum: [deposit, withdraw]
                  example: deposit
                amount:
                  type: number
                  example: 1000
      responses:
        "201":
          description: Transaction successful

    get:
      summary: Get all transactions for authenticated user
      tags: [Transactions]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of transactions

  /chatbot/chat:
    post:
      summary: Send a message to the money market funds chatbot
      tags: [Chatbot]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  example: "What are money market funds?"
                  description: Your question about money market funds
                sessionId:
                  type: string
                  example: "user-123-session"
                  description: Optional session ID for conversation continuity
      responses:
        "200":
          description: Chatbot response
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: "Money market funds are low-risk investments that hold short-term securities like Treasury bills. They offer better yields than savings accounts with high liquidity."
                    description: "Concise, easy-to-read response (2-3 sentences max)"
                  sessionId:
                    type: string
                    example: "user-123-session"
                  timestamp:
                    type: string
                    format: date-time
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Message is required and must be a non-empty string"
        "500":
          description: Server error

  /chatbot/reset:
    post:
      summary: Reset chatbot conversation for a session
      tags: [Chatbot]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId:
                  type: string
                  example: "user-123-session"
                  description: Session ID to reset (defaults to 'default')
      responses:
        "200":
          description: Conversation reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Conversation reset successfully"
                  sessionId:
                    type: string
                    example: "user-123-session"
                  timestamp:
                    type: string
                    format: date-time
        "500":
          description: Server error

  /chatbot/session:
    delete:
      summary: Delete a specific chat session
      tags: [Chatbot]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sessionId
              properties:
                sessionId:
                  type: string
                  example: "user-123-session"
                  description: Session ID to delete (cannot be 'default')
      responses:
        "200":
          description: Session deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Session deleted successfully"
                  sessionId:
                    type: string
                    example: "user-123-session"
        "400":
          description: Invalid session ID
        "404":
          description: Session not found
        "500":
          description: Server error

  /chatbot/health:
    get:
      summary: Health check for chatbot service
      tags: [Chatbot]
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  service:
                    type: string
                    example: "Money Market Funds Chatbot"
                  timestamp:
                    type: string
                    format: date-time

  /chatbot/financial-advice:
    post:
      summary: üá∞üá™ Get Expert Kenyan Financial Advice (RAG-Enhanced)
      description: |
        **AI Financial Advisor powered by RAG (Retrieval-Augmented Generation)**
        
        Get expert advice on Kenyan finances with comprehensive knowledge of:
        - **Money Market Funds** (CIC, Zimele, ICEA, etc.)
        - **NSE Stock Market** (Listed companies, sectors, performance)
        - **Banking Products** (KCB, Equity, Co-op rates and services)  
        - **Investment Options** (Unit trusts, bonds, treasury bills)
        - **Economic Indicators** (Interest rates, inflation, GDP)
        - **Fintech Services** (M-Pesa, mobile banking, digital lending)
        
        **How it works:** System searches extensive Kenyan financial knowledge base ‚Üí Provides context to Gemini ‚Üí Returns expert advice
      tags: [üá∞üá™ Financial Advisory (RAG)]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  example: "Should I invest in CIC Money Market Fund or Zimele MMF? What are the current rates?"
                  description: Your financial question (investments, banking, stocks, etc.)
                sessionId:
                  type: string
                  example: "user-financial-session"
                  description: Optional session ID for conversation continuity
      responses:
        "200":
          description: Expert financial advice with Kenyan market context
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: "Based on current data, CIC Money Market Fund offers 12.5% while Zimele offers 12.2%. CIC has lower fees (0.5% vs 0.75%) and better liquidity. For amounts above KES 100,000, CIC would be more suitable..."
                    description: "Comprehensive financial advice with specific Kenyan market data"
                  relevantContext:
                    type: array
                    items:
                      type: string
                    example: ["Money Market Funds rates comparison", "CIC MMF performance history", "Fee structures analysis"]
                    description: "Knowledge base topics used to generate the advice"
                  sessionId:
                    type: string
                    example: "user-financial-session"
                  timestamp:
                    type: string
                    format: date-time
        "400":
          description: Invalid input
        "500":
          description: Server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authenticated requests
    tempTokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Temporary token for PIN setup (15-minute expiry)
